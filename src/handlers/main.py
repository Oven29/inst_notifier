from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InputMediaPhoto, InputMediaVideo
from aiogram.utils.media_group import MediaGroupBuilder

from src.inst.types import MediaType
from src.keyboards import main as kb
from src.utils.inst_parser import inst_parser


router = Router()


@router.message(Command('start'))
async def cmd_start(message: Message) -> None:
    await message.answer(
        text='–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ Instagram\n'
            '–ü—Ä–∏—à–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å',
    )


@router.message()
async def get_profile(message: Message, state: FSMContext) -> None:
    try:
        username = message.text
        user_id = inst_parser.get_user_id(username)
        state_data = await state.get_data()
        is_sub = state_data.get(user_id)
        await message.answer(
            text=f'<a href="https://www.instagram.com/{username}">{username}</a>\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n' +
            (f'üü© –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' if is_sub else 'üü• –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'),
            reply_markup=kb.profile(user_id),
        )

    except:
        await message.answer(
            text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω',
        )


@router.callback_query(F.data.startswith('notifier'))
async def notifier(call: CallbackQuery, state: FSMContext) -> None:
    await call.answer(
        text='–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
        show_alert=True,
    )


@router.callback_query(F.data.startswith('posts'))
async def get_posts(call: CallbackQuery) -> None:
    wait_mes = await call.message.answer('–ò–¥—ë—Ç –≤—ã–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤...')
    _, user_id = call.data.split()
    posts = inst_parser.get_user_posts(user_id, count=3)

    for post in posts:
        builder = MediaGroupBuilder(
            caption=post.caption,
            media=[
                InputMediaPhoto(media=el.url) if el.type == MediaType.IMAGE.value else InputMediaVideo(media=el.url) 
                for el in post.media_list
            ],
        )
        await call.message.answer_media_group(media=builder.build())

    await wait_mes.delete()


@router.callback_query(F.data.startswith('stories'))
async def get_stories(call: CallbackQuery) -> None:
    wait_mes = await call.message.answer('–ò–¥—ë—Ç –≤—ã–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–π...')
    _, user_id = call.data.split()
    stories = inst_parser.get_user_stories(user_id)

    for i in range(0, len(stories), 10):
        builder = MediaGroupBuilder(
            caption=f'–ò—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}',
            media=[
                InputMediaPhoto(media=el.media.url) if el.media.type == MediaType.IMAGE.value else InputMediaVideo(media=el.media.url) 
                for el in stories[i:i+10]
            ],
        )
        await call.message.answer_media_group(media=builder.build())

    if len(stories) == 0:
        await wait_mes.edit_text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –∏—Å—Ç–æ—Ä–∏–π')
    else:
        await wait_mes.delete()
